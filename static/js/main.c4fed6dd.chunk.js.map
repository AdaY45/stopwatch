{"version":3,"sources":["components/Stopwatch/Stopwatch.js","hooks/use-doubleClick.js","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","props","time","className","Math","floor","slice","useDoubleClick","callback","useState","element","setElement","countRef","useRef","timerRef","inputCallbackRef","callbackRef","useCallback","node","current","useEffect","handler","isDoubleClick","timerIsPresent","clearTimeout","timer","setTimeout","addEventListener","removeEventListener","App","isSet","setIsSet","setTime","isWait","setIsWait","unsubscribe","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","startStopHandler","prevState","startStopClass","refCallback","onClick","ref","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mOAYeA,MAZf,SAAmBC,GACf,IAAOC,EAAQD,EAARC,KAEP,OAAO,sBAAKC,UAAU,OAAf,UACH,+BAAO,IAAMC,KAAKC,MAAOH,EAAI,KAAuB,KAAKI,OAAO,KAChE,qCACA,+BAAO,IAAMF,KAAKC,MAAMH,EAAO,MAAOI,OAAO,KAC7C,qCACA,+BAAO,IAAMF,KAAKC,MAAOH,EAAO,IAAO,KAAKI,OAAO,SC2C5CC,EAjDQ,SAACC,GACpB,MAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,iBAAO,GAClBC,EAAWD,iBAAO,MAClBE,EAAmBF,iBAAO,MAC1BG,EAAcC,uBAAY,SAAAC,GAC5BP,EAAWO,GACXF,EAAYG,QAAUD,IACvB,IAsCH,OApCAE,qBAAU,WACNL,EAAiBI,QAAUX,KAG/BY,qBAAU,WACN,IAAMC,EAAU,WACZ,IAAMC,EAAgBV,EAASO,QAAU,IAAM,EACzCI,EAAiBT,EAASK,QAShC,GARGI,GAAkBD,IACjBE,aAAaV,EAASK,SACtBL,EAASK,QAAU,KACnBP,EAASO,QAAU,EAChBJ,EAAiBI,SAChBJ,EAAiBI,YAGrBI,EAAgB,CAChBX,EAASO,QAAUP,EAASO,QAAU,EACtC,IAAMM,EAAQC,YAAW,WACrBF,aAAaV,EAASK,SACtBL,EAASK,QAAU,KACnBP,EAASO,QAAU,IACpB,KACHL,EAASK,QAAUM,IAO3B,OAJGf,GACCA,EAAQiB,iBAAiB,QAASN,GAG/B,WACAX,GACCA,EAAQkB,oBAAoB,QAASP,MAG9C,CAACX,IACGM,G,MC0BIa,MAnEf,WACE,MAA0BpB,oBAAS,GAAnC,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAAwBtB,mBAAS,GAAjC,mBAAOP,EAAP,KAAa8B,EAAb,KACA,EAA4BvB,oBAAS,GAArC,mBAAOwB,EAAP,KAAeC,EAAf,KAEAd,qBAAU,WACR,IAAMe,EAAc,IAAIC,IAQxB,OAPAC,YAAS,IACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLV,GACFE,GAAQ,SAACS,GAAD,OAASA,EAAM,QAGtB,WACLN,EAAYO,OACZP,EAAYQ,cAEb,CAACb,IAEJ,IAAMc,EAAmB,WAClBX,GACHD,EAAQ,GAEVD,GAAS,SAACc,GAAD,OAAgBA,KACzBX,GAAU,IAcNY,EAAkBhB,EAAsB,WAAd,YAC1BiB,EAAcxC,GAZA,WAClB2B,GAAU,GACVH,GAAS,SAACc,GAAD,OAAgBA,QAY3B,OACE,qBAAK1C,UAAU,YAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,oBAAIA,UAAU,cAAd,uBACA,cAAC,EAAD,CAAWD,KAAMA,IACjB,wBAAQC,UAAW2C,EAAgBE,QAASJ,EAA5C,SACId,EAAkB,OAAV,UAEXA,EACC,wBAAQ3B,UAAU,WAAW8C,IAAKF,EAAlC,kBAIA,wBAAQ5C,UAAU,WAAW8C,IAAKF,EAAaG,UAAQ,EAAvD,kBAIF,wBAAQ/C,UAAU,YAAY6C,QA1Bf,WACnBhB,EAAQ,GACRD,GAAS,GACTa,KAuBI,yBCtDOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c4fed6dd.chunk.js","sourcesContent":["function Stopwatch(props) {\r\n    const {time} = props;\r\n\r\n    return <div className=\"time\">\r\n        <div>{('0' + Math.floor((time / (1000 * 60 * 60)) % 24)).slice(-2)}</div>\r\n        <span>:</span>\r\n        <div>{('0' + Math.floor(time / 6000)).slice(-2)}</div>\r\n        <span>:</span>\r\n        <div>{('0' + Math.floor((time / 100) % 60)).slice(-2)}</div>\r\n    </div>\r\n};\r\n\r\nexport default Stopwatch;","import { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nconst useDoubleClick = (callback) => {\r\n    const [element, setElement] = useState(null);\r\n    const countRef = useRef(0);\r\n    const timerRef = useRef(null);\r\n    const inputCallbackRef = useRef(null);\r\n    const callbackRef = useCallback(node =>{\r\n        setElement(node);\r\n        callbackRef.current = node;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        inputCallbackRef.current = callback;\r\n    });\r\n\r\n    useEffect(() => {\r\n        const handler = () => {\r\n            const isDoubleClick = countRef.current + 1 === 2;\r\n            const timerIsPresent = timerRef.current;\r\n            if(timerIsPresent && isDoubleClick) {\r\n                clearTimeout(timerRef.current);\r\n                timerRef.current = null;\r\n                countRef.current = 0;\r\n                if(inputCallbackRef.current) {\r\n                    inputCallbackRef.current();\r\n                }\r\n            }\r\n            if(!timerIsPresent) {\r\n                countRef.current = countRef.current + 1;\r\n                const timer = setTimeout(() => {\r\n                    clearTimeout(timerRef.current);\r\n                    timerRef.current = null;\r\n                    countRef.current = 0;\r\n                }, 300);\r\n                timerRef.current = timer;\r\n            }\r\n        }\r\n        if(element) {\r\n            element.addEventListener(\"click\", handler);\r\n        }\r\n\r\n        return () => {\r\n            if(element) {\r\n                element.removeEventListener(\"click\", handler);\r\n            }\r\n        };\r\n    }, [element]);\r\n    return callbackRef;\r\n};\r\n\r\nexport default useDoubleClick;","import { useState, useEffect } from \"react\";\nimport { interval, Subject, takeUntil } from \"rxjs\";\nimport Stopwatch from \"./components/Stopwatch/Stopwatch\";\nimport useDoubleClick from \"./hooks/use-doubleClick\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [isSet, setIsSet] = useState(false);\n  const [time, setTime] = useState(0);\n  const [isWait, setIsWait] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = new Subject();\n    interval(10)\n      .pipe(takeUntil(unsubscribe))\n      .subscribe(() => {\n        if (isSet) {\n          setTime((val) => val + 1);\n        }\n      });\n    return () => {\n      unsubscribe.next();\n      unsubscribe.complete();\n    };\n  }, [isSet]);\n\n  const startStopHandler = () => {\n    if (!isWait) {\n      setTime(0);\n    }\n    setIsSet((prevState) => !prevState);\n    setIsWait(false);\n  };\n\n  const waitHandler = () => {\n    setIsWait(true);\n    setIsSet((prevState) => !prevState);\n  };\n\n  const resetHandler = () => {\n    setTime(0);\n    setIsSet(false);\n    startStopHandler();\n  };\n\n  const startStopClass = !isSet ? \"start-btn\" : \"stop-btn\";\n  const refCallback = useDoubleClick(waitHandler);\n\n  return (\n    <div className=\"container\">\n      <div className=\"stopwatch-container\">\n        <h2 className=\"header-text\">Stopwatch</h2>\n        <Stopwatch time={time} />\n        <button className={startStopClass} onClick={startStopHandler}>\n          {!isSet ? \"Start\" : \"Stop\"}\n        </button>\n        {isSet ? (\n          <button className=\"wait-btn\" ref={refCallback}>\n            Wait\n          </button>\n        ) : (\n          <button className=\"wait-btn\" ref={refCallback} disabled>\n            Wait\n          </button>\n        )}\n        <button className=\"reset-btn\" onClick={resetHandler}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}